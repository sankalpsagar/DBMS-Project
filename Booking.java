/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package medikart;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.Toolkit;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.Statement;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Sankalp
 */
public class Booking extends javax.swing.JFrame {
    String doc;
    String pati;
    /**
     * Creates new form Booking
     */
    public Booking(String u, String p) {
        initComponents();
        Dimension dim = Toolkit.getDefaultToolkit().getScreenSize();
        this.setLocation(dim.width/2-this.getSize().width/2, dim.height/2-this.getSize().height/2);
        getContentPane().setBackground(Color.black);
        this.doc = u;
        this.pati = p;
        l1.setText(this.doc);
        
        DefaultTableModel tb = (DefaultTableModel) tb1.getModel();
        tb.setRowCount(0);
        Connection conn = null;
        try {
        conn = DriverManager.getConnection(MediKart.url, MediKart.user, MediKart.password);
        Statement stmt=conn.createStatement(); 
        String sql = "select * from doctor, employment, hospital where doctor.doctorID = employment.doctorID and"
                + " employment.hospitalID = hospital.hospitalID and doctor.doctorID = (select doctorID from users, userrelations, doctor where users.userid = "
                        + "userrelations.userid and userrelations.roleid = doctor.doctorID and userrelations.role="
                        + "'Doctor' and users.userid = '"+(this.doc)+"')";
        ResultSet rs=stmt.executeQuery(sql);
            
        while(rs.next()) {
            String HName = rs.getString("hospital.Name");
            int st = rs.getInt("employment.starttime");
            int ct = rs.getInt("employment.endtime");
            tb.addRow(new Object[]{HName, st, ct});
            tb1.setModel(tb);
        }}
         catch (Exception e) {
            JOptionPane.showMessageDialog(this, e.getMessage());
        }  
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tb1 = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        l1 = new javax.swing.JLabel();
        t1 = new javax.swing.JTextField();
        b1 = new javax.swing.JButton();
        b2 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("DejaVu Sans Condensed", 3, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Enter Time:");

        tb1.setBackground(new java.awt.Color(0, 0, 0));
        tb1.setFont(new java.awt.Font("DejaVu Sans Condensed", 0, 14)); // NOI18N
        tb1.setForeground(new java.awt.Color(255, 255, 255));
        tb1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Hospital Name", "Start Time", "End Time"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tb1);

        l1.setFont(new java.awt.Font("DejaVu Sans Condensed", 3, 18)); // NOI18N
        l1.setForeground(new java.awt.Color(255, 255, 255));
        l1.setText("Doctor Name");

        t1.setBackground(new java.awt.Color(0, 0, 0));
        t1.setFont(new java.awt.Font("DejaVu Sans Condensed", 2, 14)); // NOI18N
        t1.setForeground(new java.awt.Color(255, 255, 255));

        b1.setBackground(new java.awt.Color(0, 0, 0));
        b1.setFont(new java.awt.Font("DejaVu Sans Condensed", 2, 14)); // NOI18N
        b1.setForeground(new java.awt.Color(255, 255, 255));
        b1.setText("Book");
        b1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b1ActionPerformed(evt);
            }
        });

        b2.setBackground(new java.awt.Color(0, 0, 0));
        b2.setFont(new java.awt.Font("DejaVu Sans Condensed", 2, 14)); // NOI18N
        b2.setForeground(new java.awt.Color(255, 255, 255));
        b2.setText("Exit");
        b2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(44, 44, 44)
                        .addComponent(t1))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(b2, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(b1, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(25, Short.MAX_VALUE))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(31, 31, 31)
                    .addComponent(l1, javax.swing.GroupLayout.PREFERRED_SIZE, 414, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(54, Short.MAX_VALUE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(71, 71, 71)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 207, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel2)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(t1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(b1)
                    .addComponent(b2))
                .addContainerGap(94, Short.MAX_VALUE))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(41, 41, 41)
                    .addComponent(l1)
                    .addContainerGap(421, Short.MAX_VALUE)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void b2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b2ActionPerformed
        // TODO add your handling code here:
        this.dispose();
    }//GEN-LAST:event_b2ActionPerformed

    private void b1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b1ActionPerformed
        // TODO add your handling code here:
        if (t1.getText().equals("")){
            JOptionPane.showMessageDialog(this, "You must select a time!");
        }
        else if (tb1.getSelectedRow()==-1){
            JOptionPane.showMessageDialog(this, "You must select a hospital!");
        }
        else
        {
            int pid=0, did=0;
            DefaultTableModel tb = (DefaultTableModel) tb1.getModel();
            int time = Integer.parseInt(t1.getText());
            int i = tb1.getSelectedRow();
            int st = Integer.parseInt(tb.getValueAt(i, 1).toString());
            int et = Integer.parseInt(tb.getValueAt(i, 2).toString());
            if (time >= st && time <= et)
            {
                Connection conn = null;
                try{
                    conn = DriverManager.getConnection(MediKart.url, MediKart.user, MediKart.password);
                Statement stmt=conn.createStatement(); 
//                String sql = "insert into appointments (patientID, doctorID, Time, Status) values "
//                        + "((select patient.patientID from users, userrelations, patient where users.userid = userrelations.userid "
//                        + "and userrelations.roleID = patient.patientID and userrelations.role='Patient' and users.userid "
//                        + "= '"+(this.pati)+"'), (select doctor.doctorID from users, userrelations, doctor where users.userid = "
//                        + "userrelations.userid and userrelations.roleid = doctor.doctorID and userrelations.role="
//                        + " 'Doctor' and users.userid = '"+(this.doc)+"'), "+(time)+", 'Pending');";
                String sql = "select patientID from users, userrelations, patient where users.userid = "
                        + "userrelations.userid and userrelations.roleID = patient.patientID and userrelations.role='Patient' and "
                        + "users.userid = '"+(this.pati)+"'";
                ResultSet rs = stmt.executeQuery(sql);
                while (rs.next()){
                    pid = rs.getInt("patientID");
                }
                 sql = "select doctorID from users, userrelations, doctor where users.userid = "
                        + "userrelations.userid and userrelations.roleid = doctor.doctorID and userrelations.role="
                        + " 'Doctor' and users.userid = '"+(this.doc)+"'";
                rs = stmt.executeQuery(sql);
                while (rs.next()){
                    pid = rs.getInt("doctorID");
                }
                sql = "insert into appointments(patientID, doctorID, time, status) values"
                        + "('"+(pid)+"', '"+(did)+"', "+(time)+", 'Pending')";
                JOptionPane.showMessageDialog(this, "Appointment requested!");
                        }
                catch (Exception e){
                    JOptionPane.showMessageDialog(this, e.getMessage());
                }
            }
            else{
                JOptionPane.showMessageDialog(this, "Check the time!");
            }
        }
    }//GEN-LAST:event_b1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Booking.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Booking.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Booking.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Booking.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Booking("Dr.Roop","rutanjit").setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton b1;
    private javax.swing.JButton b2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel l1;
    private javax.swing.JTextField t1;
    private javax.swing.JTable tb1;
    // End of variables declaration//GEN-END:variables
}
